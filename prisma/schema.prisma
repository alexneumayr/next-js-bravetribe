// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String       @id @default(cuid())
  email                  String       @unique
  username               String       @unique
  passwordHash           String
  role                   Role         @default(user)
  avatarImage            String?
  gender                 String?
  location               String?
  aboutDescription       String?
  areExperiencesPublic   Boolean      @default(true)
  goals                  Goal[]
  sentFriendRequests     Friend[]     @relation("requester")
  receivedFriendRequests Friend[]     @relation("receiver")
  challenges             Challenge[]
  experiences            Experience[]
  comments               Comment[]
  sessions               Session[]
  likes                  Like[]
  memberSince            DateTime     @default(now())
}

model Goal {
  id              String   @id @default(cuid())
  title           String
  deadline        DateTime
  additionalNotes String?
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  createdAt       DateTime @default(now())
}

model Friend {
  id              String  @id @default(cuid())
  requesterUser   User    @relation("requester", fields: [requesterUserId], references: [id], onDelete: Cascade)
  requesterUserId String
  receiverUser    User    @relation("receiver", fields: [receiverUserId], references: [id], onDelete: Cascade)
  receiverUserId  String
  isAccepted      Boolean @default(false)

  @@unique([requesterUserId, receiverUserId])
}

model Challenge {
  id          String       @id @default(cuid())
  title       String
  description String
  isCompleted Boolean      @default(false)
  plannedDate DateTime
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  experiences Experience[]
  createdAt   DateTime     @default(now())
}

model Experience {
  id          String    @id @default(cuid())
  title       String
  story       String
  rating      Float
  image       String?
  location    String?
  date        DateTime
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime  @default(now())
}

// Here the user is optional and without onDelete Cascade, so that if a user deletes their account the (hopefully) motivational comments they have made on other user's experiences don't get removed
model Comment {
  id           String     @id @default(cuid())
  content      String
  createdAt    DateTime   @default(now())
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  experienceId String
  user         User?      @relation(fields: [userId], references: [id])
  userId       String
}

model Session {
  id              String   @id @default(cuid())
  token           String   @unique
  expiryTimestamp DateTime @default(dbgenerated("now() + interval '24 hours'"))
  user            User     @relation(fields: [userId], references: [id])
  userId          String
}

model Like {
  id           String     @id @default(cuid())
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  experienceId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model Template {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String
  imageAlt    String
  createdAt   DateTime @default(now())
}

enum Role {
  user
  admin
}
